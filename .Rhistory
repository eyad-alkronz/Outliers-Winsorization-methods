exp_data$label = "Exponential distribution MSE_rate"
mergData <- norm_data%>%rbind(norm_data2) %>% rbind(exp_data) %>% rbind(nb_data)
plot <- mergData %>% filter(contamination == 10) %>%
filter(
(label == "Normal Distribution MSE_XBar" & Method=="MSE_XBar_Median") |
(label == "Normal Distribution MSE_SD" & Method=="MSE_SD_Mean") |
(label == "Negative binomial distribution MSE_prop" & Method=="MSE_prop_Mode") |
(label == "Exponential distribution MSE_rate" & Method=="MSE_rate_Q_b_F_C")
) %>%
ggplot(aes(x = (sampleSize) , y = value)) +
geom_point( aes(colour = as.factor(Method)   )) +
geom_line( aes( colour =  as.factor(Method) )) +
labs( caption =  ""
,subtitle =  "" ,  colour = ""  , shape =  "" )+
xlab("Sample size") + ylab("MSE") +
scale_colour_discrete(
labels = c(
"MSE_prop_Mode" = expression(hat(p)*"  {Mode}")   ,
"MSE_rate_Q_b_F_C"=  expression(hat(theta)*"  {Qunatile}") ,
"MSE_SD_Mean" =  expression(hat(sigma)*"  {Mean}") ,
"MSE_XBar_Median" = expression(hat(mu)*"  {Median}")
)
)+ theme(legend.position = "top",
legend.direction = "horizontal")
gridExtra::grid.arrange( plot, bottom="Figure 1: MSE of different parameter estimates after using winsorization methods \n in brackets  for different sample size")
knitr::opts_chunk$set(echo = TRUE)
ddd <-results %>%
mutate(fittedBefore = ifelse(Before_P_value > 0.05,TRUE,FALSE)) %>%
mutate(fittedAfterMean = ifelse(mean_P_value > 0.05,TRUE,FALSE))   %>%
mutate(fittedAfterMedian = ifelse(median_P_value > 0.05,TRUE,FALSE))  %>%
mutate(fittedAfterQ_b_F_C_P = ifelse(Q_b_F_C_P_value > 0.05,TRUE,FALSE))
r1 <- ddd %>% summarize(
fittedBefore = round(mean(fittedBefore),2),
fittedAfterMean = round(mean(fittedAfterMean),2),
fittedAfterMedian = round(mean(fittedAfterMedian),2),
fittedAfterQ_b_F_C_P = round(mean(fittedAfterQ_b_F_C_P),2),
)
meanResults <- chisq.test(table(ddd$fittedBefore, ddd$fittedAfterMean))
medianResults <- chisq.test(table(ddd$fittedBefore, ddd$fittedAfterMedian))
Q_b_F_C_PResults <- chisq.test(table(ddd$fittedBefore, ddd$fittedAfterQ_b_F_C_P))
r1[nrow(r1) + 1,] = c("-" ,round(meanResults$statistic,2) ,round(medianResults$statistic,2) , round(Q_b_F_C_PResults$statistic,2) )
#r1[nrow(r1) + 1,] = c("-" ,round(meanResults$p.value,3) ,round(medianResults$p.value,3) ,round( Q_b_F_C_PResults$p.value,3) )
r1[nrow(r1) + 1,] = c("-" ,"0.00","0.00","0.00")
r1 <- data.frame(statistics =c("Proportion of fit" , " Chi-square test" , "p-value" ), r1)
r1 %>%
knitr::kable(
caption = "Summary of fitted users data before and after winsorization by exponential distribution" ,
col.names = c( "Statistics",  "Before"  , "Mean" , "Median" , "Quantile-based") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l" )
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position"))  %>%
kableExtra::add_header_above(c(" " = 1," " = 1, "After Outliers Winsorization" = 3))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
library(robust)
library(dplyr)
library(ggplot2)
library(MLmetrics )
library(SimDesign)
library(tidyr)
library(stringr)
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=15,font=8)))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
library(grid)
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=15,font=8)))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
library(grid)
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=8,font=8)))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
library(grid)
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=8)))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
library(grid)
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=13)))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
library(grid)
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=12)))
results <- read.csv("results.csv")
plot <- results %>%   ggplot(aes(x = (outliersPro ))) +
geom_histogram(fill = "steelblue") +
xlab("Outliers proportion") +
ylab("Count")+
theme_minimal()
# gridExtra::grid.arrange( plot, bottom="Figure 2: Histogram of detected outliers proportion")
library(grid)
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 2: Histogram of detected outliers proportion", gp=gpar(fontsize=11)))
plot <- mergData %>% filter(contamination == 10) %>%
filter(
(label == "Normal Distribution MSE_XBar" & Method=="MSE_XBar_Median") |
(label == "Normal Distribution MSE_SD" & Method=="MSE_SD_Mean") |
(label == "Negative binomial distribution MSE_prop" & Method=="MSE_prop_Mode") |
(label == "Exponential distribution MSE_rate" & Method=="MSE_rate_Q_b_F_C")
) %>%
ggplot(aes(x = (sampleSize) , y = value)) +
geom_point( aes(colour = as.factor(Method)   )) +
geom_line( aes( colour =  as.factor(Method) )) +
labs( caption =  ""
,subtitle =  "" ,  colour = ""  , shape =  "" )+
xlab("Sample size") + ylab("MSE") +
scale_colour_discrete(
labels = c(
"MSE_prop_Mode" = expression(hat(p)*"  {Mode}")   ,
"MSE_rate_Q_b_F_C"=  expression(hat(theta)*"  {Qunatile}") ,
"MSE_SD_Mean" =  expression(hat(sigma)*"  {Mean}") ,
"MSE_XBar_Median" = expression(hat(mu)*"  {Median}")
)
)+ theme(legend.position = "top",
legend.direction = "horizontal")
gridExtra::grid.arrange( plot, bottom= textGrob("Figure 1: MSE of different parameter estimates after using winsorization methods \n in brackets  for different sample size" , gp=gpar(fontsize=11)))
megerTableSD <- finalResult_Normal
megerTableSD$bias_SD_Q_b_F_C <-  round(megerTableSD$bias_SD_Q_b_F_C ,3)
megerTableSD$bias_SD_Mean <-  round(megerTableSD$bias_SD_Mean ,3)
megerTableSD$bias_SD_Median <-  round(megerTableSD$bias_SD_Median ,3)
megerTableSD$bias_SD_Mode <-  round(megerTableSD$bias_SD_Mode ,3)
megerTableSD$MSE_SD_Q_b_F_C <-  round(megerTableSD$MSE_SD_Q_b_F_C ,3)
megerTableSD$MSE_SD_Mean <-  round(megerTableSD$MSE_SD_Mean ,3)
megerTableSD$MSE_SD_Median <-  round(megerTableSD$MSE_SD_Median ,3)
megerTableSD$MSE_SD_Mode <-  round(megerTableSD$MSE_SD_Mode ,3)
megerTableSD$Quantile_based <- str_c(megerTableSD$bias_SD_Q_b_F_C , ' (' , megerTableSD$MSE_SD_Q_b_F_C , ')' )
library(robust)
library(dplyr)
library(ggplot2)
library(MLmetrics )
library(SimDesign)
library(tidyr)
library(stringr)
library(grid)
megerTableSD <- finalResult_Normal
megerTableSD$bias_SD_Q_b_F_C <-  round(megerTableSD$bias_SD_Q_b_F_C ,3)
megerTableSD$bias_SD_Mean <-  round(megerTableSD$bias_SD_Mean ,3)
megerTableSD$bias_SD_Median <-  round(megerTableSD$bias_SD_Median ,3)
megerTableSD$bias_SD_Mode <-  round(megerTableSD$bias_SD_Mode ,3)
megerTableSD$MSE_SD_Q_b_F_C <-  round(megerTableSD$MSE_SD_Q_b_F_C ,3)
megerTableSD$MSE_SD_Mean <-  round(megerTableSD$MSE_SD_Mean ,3)
megerTableSD$MSE_SD_Median <-  round(megerTableSD$MSE_SD_Median ,3)
megerTableSD$MSE_SD_Mode <-  round(megerTableSD$MSE_SD_Mode ,3)
megerTableSD$Quantile_based <- str_c(megerTableSD$bias_SD_Q_b_F_C , ' (' , megerTableSD$MSE_SD_Q_b_F_C , ')' )
megerTableSD$Mean <- str_c(megerTableSD$bias_SD_Mean , ' (' , megerTableSD$MSE_SD_Mean , ')' )
megerTableSD$Median <- str_c(megerTableSD$bias_SD_Median , ' (' , megerTableSD$MSE_SD_Median , ')' )
megerTableSD$Mode <- str_c(megerTableSD$bias_SD_Mode , ' (' , megerTableSD$MSE_SD_Mode , ')' )
megerTableSD %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the normal distribution's standared deviation estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization  Methods" = 4))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
megerTableProp$Quantile_based <- str_c(megerTableProp$bias_prop_Q_b_F_C , ' (' , megerTableProp$MSE_prop_Q_b_F_C , ')' )
megerTableProp$Mean <- str_c(megerTableProp$bias_prop_Mean , ' (' , megerTableProp$MSE_prop_Mean , ')' )
megerTableProp$Median <- str_c(megerTableProp$bias_prop_Median , ' (' , megerTableProp$MSE_prop_Median , ')' )
megerTableProp$Mode <- str_c(megerTableProp$bias_prop_Mode , ' (' , megerTableProp$MSE_prop_Mode , ')' )
megerTableProp %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the negative binomial distribution probability of success estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization methods" = 4))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
megerTableProp %>% mutate(MSE_prop_Q_b_F_C = case_when(
MSE_prop_Q_b_F_C == 0 ~ "0.00" ,
TRUE ~ MSE_prop_Q_b_F_C
))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
megerTableProp %>% mutate(MSE_prop_Q_b_F_C = case_when(
MSE_prop_Q_b_F_C == 0 ~ "0.00" ,
TRUE ~ as.character(MSE_prop_Q_b_F_C)
))
megerTableProp$Quantile_based <- str_c(megerTableProp$bias_prop_Q_b_F_C , ' (' , megerTableProp$MSE_prop_Q_b_F_C , ')' )
megerTableProp$Mean <- str_c(megerTableProp$bias_prop_Mean , ' (' , megerTableProp$MSE_prop_Mean , ')' )
megerTableProp$Median <- str_c(megerTableProp$bias_prop_Median , ' (' , megerTableProp$MSE_prop_Median , ')' )
megerTableProp$Mode <- str_c(megerTableProp$bias_prop_Mode , ' (' , megerTableProp$MSE_prop_Mode , ')' )
megerTableProp %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the negative binomial distribution probability of success estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization methods" = 4))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
megerTableProp <- megerTableProp %>% mutate(MSE_prop_Q_b_F_C = case_when(
MSE_prop_Q_b_F_C == 0 ~ "0.00" ,
TRUE ~ as.character(MSE_prop_Q_b_F_C)
))
megerTableProp$Quantile_based <- str_c(megerTableProp$bias_prop_Q_b_F_C , ' (' , megerTableProp$MSE_prop_Q_b_F_C , ')' )
megerTableProp$Mean <- str_c(megerTableProp$bias_prop_Mean , ' (' , megerTableProp$MSE_prop_Mean , ')' )
megerTableProp$Median <- str_c(megerTableProp$bias_prop_Median , ' (' , megerTableProp$MSE_prop_Median , ')' )
megerTableProp$Mode <- str_c(megerTableProp$bias_prop_Mode , ' (' , megerTableProp$MSE_prop_Mode , ')' )
megerTableProp %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the negative binomial distribution probability of success estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization methods" = 4))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
megerTableProp <- megerTableProp %>% mutate(MSE_prop_Q_b_F_C = case_when(
MSE_prop_Q_b_F_C == 0 ~ "0.000" ,
TRUE ~ as.character(MSE_prop_Q_b_F_C)
))
megerTableProp$Quantile_based <- str_c(megerTableProp$bias_prop_Q_b_F_C , ' (' , megerTableProp$MSE_prop_Q_b_F_C , ')' )
megerTableProp$Mean <- str_c(megerTableProp$bias_prop_Mean , ' (' , megerTableProp$MSE_prop_Mean , ')' )
megerTableProp$Median <- str_c(megerTableProp$bias_prop_Median , ' (' , megerTableProp$MSE_prop_Median , ')' )
megerTableProp$Mode <- str_c(megerTableProp$bias_prop_Mode , ' (' , megerTableProp$MSE_prop_Mode , ')' )
megerTableProp %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the negative binomial distribution probability of success estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization methods" = 4))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
# change all zero to 0.000
megerTableProp <- megerTableProp %>%
mutate(
MSE_prop_Q_b_F_C = case_when(  MSE_prop_Q_b_F_C == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Q_b_F_C)) ,
MSE_prop_Mean = case_when(  MSE_prop_Mean == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Mean)) ,
MSE_prop_Median = case_when(  MSE_prop_Median == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Median)) ,
MSE_prop_Mode = case_when(  MSE_prop_Mode == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Mode)) ,
)
megerTableProp$Quantile_based <- str_c(megerTableProp$bias_prop_Q_b_F_C , ' (' , megerTableProp$MSE_prop_Q_b_F_C , ')' )
megerTableProp$Mean <- str_c(megerTableProp$bias_prop_Mean , ' (' , megerTableProp$MSE_prop_Mean , ')' )
megerTableProp$Median <- str_c(megerTableProp$bias_prop_Median , ' (' , megerTableProp$MSE_prop_Median , ')' )
megerTableProp$Mode <- str_c(megerTableProp$bias_prop_Mode , ' (' , megerTableProp$MSE_prop_Mode , ')' )
megerTableProp %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the negative binomial distribution probability of success estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization methods" = 4))
megerTableProp <- finalResult_NB
megerTableProp$bias_prop_Q_b_F_C <-  round(megerTableProp$bias_prop_Q_b_F_C ,3)
megerTableProp$bias_prop_Mean <-  round(megerTableProp$bias_prop_Mean ,3)
megerTableProp$bias_prop_Median <-  round(megerTableProp$bias_prop_Median ,3)
megerTableProp$bias_prop_Mode <-  round(megerTableProp$bias_prop_Mode ,3)
megerTableProp$MSE_prop_Q_b_F_C <-  round(megerTableProp$MSE_prop_Q_b_F_C ,3)
megerTableProp$MSE_prop_Mean <-  round(megerTableProp$MSE_prop_Mean ,3)
megerTableProp$MSE_prop_Median <-  round(megerTableProp$MSE_prop_Median ,3)
megerTableProp$MSE_prop_Mode <-  round(megerTableProp$MSE_prop_Mode ,3)
# change all zero to 0.000
megerTableProp <- megerTableProp %>%
mutate(
bias_prop_Q_b_F_C = case_when(  bias_prop_Q_b_F_C == 0 ~ "0.000" ,  TRUE ~ as.character(bias_prop_Q_b_F_C)) ,
bias_prop_Mean = case_when(  bias_prop_Mean == 0 ~ "0.000" ,  TRUE ~ as.character(bias_prop_Mean)) ,
bias_prop_Median = case_when(  bias_prop_Median == 0 ~ "0.000" ,  TRUE ~ as.character(bias_prop_Median)) ,
bias_prop_Mode = case_when(  bias_prop_Mode == 0 ~ "0.000" ,  TRUE ~ as.character(bias_prop_Mode)) ,
MSE_prop_Q_b_F_C = case_when(  MSE_prop_Q_b_F_C == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Q_b_F_C)) ,
MSE_prop_Mean = case_when(  MSE_prop_Mean == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Mean)) ,
MSE_prop_Median = case_when(  MSE_prop_Median == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Median)) ,
MSE_prop_Mode = case_when(  MSE_prop_Mode == 0 ~ "0.000" ,  TRUE ~ as.character(MSE_prop_Mode)) ,
)
megerTableProp$Quantile_based <- str_c(megerTableProp$bias_prop_Q_b_F_C , ' (' , megerTableProp$MSE_prop_Q_b_F_C , ')' )
megerTableProp$Mean <- str_c(megerTableProp$bias_prop_Mean , ' (' , megerTableProp$MSE_prop_Mean , ')' )
megerTableProp$Median <- str_c(megerTableProp$bias_prop_Median , ' (' , megerTableProp$MSE_prop_Median , ')' )
megerTableProp$Mode <- str_c(megerTableProp$bias_prop_Mode , ' (' , megerTableProp$MSE_prop_Mode , ')' )
megerTableProp %>% select(sampleSize , contamination ,Quantile_based , Mean , Median ,Mode ) %>%
knitr::kable(
caption = "Bias (MSE) of the negative binomial distribution probability of success estimator for different winsorization methods" ,
col.names = c("n" ,  "$\\epsilon$" ,"Quantile-based", "Mean" , "Median" , "Mode") , escape = FALSE ,
digits = 3 , align = c("l","l" , "l","l","l","l")
,
)  %>%
kableExtra:: kable_classic_2(
full_width = F,
position = "center" ,
latex_options = "striped"
)%>%
kableExtra::  kable_styling(latex_options = c("HOLD_position")) %>%
kableExtra::add_header_above(c(" " = 2, "Winsorization methods" = 4))
install.packages(robust)
install.packages("robust")
library(robust)
###################################################################
################# Load Library ###################################
library(robust)
library(dplyr)
library(ggplot2)
library(MLmetrics)
library(SimDesign)
library(tidyr)
library(EnvStats)
library(iZID)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
createDataWithContamination_NB_P <- function(sample_size , contamination_prop  ){
data <- rnbinom(sample_size , size = 2, prob = .2)
contaminations <-   rpois(round((sample_size*contamination_prop)), lambda = 32)
data_with_contamination <- c(data, contaminations)
list(
data = data,
contaminations = contaminations,
data_with_contamination = data_with_contamination
)
}
generateData <- function(sampleSize , contamination ){
results = NULL
#create 1000 random sample with contamination
for(i in 1:500){
print(i)
print(Sys.time())
print("-------------")
#generate data
allData <-  createDataWithContamination_NB_P(sampleSize,contamination)
data_with_contamination <-  allData$data_with_contamination
originalData <-  allData$data
#Code To Handling outlier
#Quantile based flooring and capping
#In this technique, the outlier is capped at a certain value above the upper percentile value or floored   at a factor below the lower percentile value.
lower  = quantile(data_with_contamination  , c(.025))[["2.5%"]]
upper = quantile(data_with_contamination  , c(.975))[["97.5%"]]
outliers <- boxplot(data_with_contamination, plot=FALSE)$out
outliersPos <- which(data_with_contamination %in% outliers)
data_AfterDelete_Outliers <-  data_with_contamination[-outliersPos]
dataAfterHandling_Q_b_F_C <- data_with_contamination
dataAfterHandling_mean <- data_with_contamination
dataAfterHandling_median <- data_with_contamination
dataAfterHandling_mode <- data_with_contamination
dataAfterHandling_Q_b_F_C[dataAfterHandling_Q_b_F_C<lower] <- round(lower)
dataAfterHandling_Q_b_F_C[dataAfterHandling_Q_b_F_C>upper] <- round(upper)
estimated_prop_After_Q_b_F_C <- enbinom(dataAfterHandling_Q_b_F_C, size = 2)$parameters[2][["prob"]]
mean = mean(data_AfterDelete_Outliers)
dataAfterHandling_mean[outliersPos] <- round(mean)
estimated_prop_After_mean <- enbinom(dataAfterHandling_mean, size = 2)$parameters[2][["prob"]]
median = median(data_AfterDelete_Outliers)
dataAfterHandling_median[outliersPos] <- round(median)
estimated_prop_After_median <- enbinom(dataAfterHandling_median, size = 2)$parameters[2][["prob"]]
mode = getmode(data_AfterDelete_Outliers)
dataAfterHandling_mode[outliersPos] <- round(mode)
estimated_prop_After_mode <- enbinom(dataAfterHandling_mode, size = 2)$parameters[2][["prob"]]
Q_b_F_C_P_value <-dis.kstest(dataAfterHandling_Q_b_F_C,nsim=31,bootstrap=FALSE,distri='nb' , parallel = TRUE)$pvalue
mean_P_value <-dis.kstest(dataAfterHandling_mean,nsim=31,bootstrap=FALSE,distri='nb', parallel = TRUE)$pvalue
median_P_value <-dis.kstest(dataAfterHandling_median,nsim=31,bootstrap=FALSE,distri='nb', parallel = TRUE)$pvalue
mode_P_value <-dis.kstest(dataAfterHandling_mode,nsim=31,bootstrap=FALSE,distri='nb', parallel = TRUE)$pvalue
p_value_Before_Handling <-dis.kstest(data_with_contamination,nsim=31,bootstrap=FALSE,distri='nb', parallel = TRUE)$pvalue
p_value_OriginalData <-dis.kstest(originalData,nsim=31,bootstrap=FALSE,distri='nb', parallel = TRUE)$pvalue
results = rbind(
results,
data.frame(
i,
estimated_prop_After_Q_b_F_C,
estimated_prop_After_mean,
estimated_prop_After_median,
estimated_prop_After_mode,
Q_b_F_C_P_value,
mean_P_value,
median_P_value,
mode_P_value,
p_value_Before_Handling,
p_value_OriginalData
))
}
results
}
# different sample size and contamination=20%
data_20_2_15 <- generateData(20 , 0.2)
View(data_20_2_15)
write.csv(data_20_2_20,"NB_Data\\data_20_2_20.csv", row.names = TRUE)
write.csv(data_20_2_15,"NB_Data\\data_20_2_20.csv", row.names = TRUE)
# different sample size and contamination=0%
data_20_2_0 <- generateData(20 , 0)
write.csv(data_20_2_0,"NB_Data\\data_20_2_0.csv", row.names = TRUE)
write.csv(data_100_2_0,"NB_Data\\data_100_2_0.csv", row.names = TRUE)
write.csv(data_20_2_0,"NB_Data\\data_20_2_0.csv", row.names = TRUE)
# different sample size   and contamination=5%
data_20_2_5 <- read.csv( "NB_Data\\data_20_2_5.csv" , header = TRUE)
